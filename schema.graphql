# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type ApiResponse {
    error: String!
    ok: Boolean!
}

type Comment {
    createdAt: DateTime!
    id: Int!
    post: Post!
    replay: Comment!
    replayId: Float
    replies: [Comment!]!
    text: String!
    updatedAt: DateTime!
    user: User!
}

type LoginResponse {
    accessToken: String!
    user: User!
}

type Mutation {
    addPost(body: postBodyInput!, title: String!): Post!
    deletePost(id: Float!): ApiResponse!
    leaveComment(postId: Int!, replayId: Int, text: String!): Comment!
    login(email: String!, password: String!): LoginResponse!
    register(email: String!, password: String!): LoginResponse!
    revokeRefreshTokens(id: Float!): Boolean!
}

type Post {
    body: postBody!
    comments: [Comment!]!
    createdAt: DateTime!
    id: Int!
    title: String!
    updatedAt: DateTime!
}

type PostPreview {
    bodyPreview: String!
    id: Float!
    imageSrc: String
    title: String!
}

type Query {
    getAmountOfPosts: Int!
    getPost(id: Int!): Post
    hello: String!
    me: User
    posts: [Post!]!
    postsPreview(skip: Int!, take: Int!): [PostPreview!]!
    users: [User!]!
}

type User {
    email: String!
    id: Int!
}

type contentBlock {
    depth: Float!
    entityRanges: [entityRange!]!
    inlineStyleRanges: [inlineStyleRange!]!
    key: String!
    text: String!
    type: String!
}

type entityData {
    src: String
}

type entityMap {
    data: entityData!
    mutability: Mutability!
    type: entityType!
}

type entityRange {
    key: Float!
    length: Float!
    offset: Float!
}

type inlineStyleRange {
    length: Float!
    offset: Float!
    style: String!
}

type postBody {
    blocks: [contentBlock!]!
    entityMap: [entityMap!]!
}

enum Mutability {
    IMMUTABLE
    MUTABLE
    SEGMENTED
}

enum entityType {
    IMAGE
    LINK
}

input contentBlockInput {
    depth: Float!
    entityRanges: [entityRangeInput!]!
    inlineStyleRanges: [inlineStyleRangeInput!]!
    key: String!
    text: String!
    type: String!
}

input entityDataInput {
    src: String
}

input entityMapInput {
    data: entityDataInput!
    mutability: Mutability!
    type: entityType!
}

input entityRangeInput {
    key: Float!
    length: Float!
    offset: Float!
}

input inlineStyleRangeInput {
    length: Float!
    offset: Float!
    style: String!
}

input postBodyInput {
    blocks: [contentBlockInput!]!
    entityMap: [entityMapInput!]!
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime